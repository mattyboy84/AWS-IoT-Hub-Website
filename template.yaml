AWSTemplateFormatVersion: '2010-09-09'

Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
############################
#### AMPLIFY PARAMETERS ####
############################
  AmplifyAppRepoURL:
    Type: String
    Description: Gitlab repository url of the amplify app # not .git
    Default: ''
  AmplifyAppRepoBranch:
    Type: String
    Description: Gitlab repository branch tha the amplify app was deployed to
    Default: ''
  AmplifyAppRepoToken:
    Type: String
    Description: Gitlab repository token of the amplify app
    Default: ''
###########################
#### DOMAIN PARAMETERS ####
###########################
  Domain:
    Type: String
    Description: Domain to create subdomains under
    Default: ''
  DomainPrefix:
    Type: String
    Description: optional sub-domain
    Default: 'iot' # can be made of lowercase letters, numbers or -
  DomainCert:
    Type: String
    Description: certificate arn of the domain to be setup.
    Default: ''
##########################
  IoTBrokerEndpoint:
    Type: String
    Description: Your Region & Account specific IoT Broker Endpoint. Check with 'aws iot describe-endpoint'
    Default: ''
  iotCertificateArn:
    Type: String
    Description: Arn of the certificate that the device uses
    Default: ''

Conditions:
  IsDomainConfigured: !Not [!Equals [!Ref Domain, '']]
  IsSubDomainConfigured:
    !And
      - !Not [!Equals [!Ref Domain, '']]
      - !Not [!Equals [!Ref DomainPrefix, '']]

Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 3008
    Timeout: 900
  
Resources:
###################
#### IAM ROLES ####
###################
  AmplifyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-AmplifyFunctionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-amplify-role-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "amplify:*"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess-Amplify"
  
  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-lambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  dynamoStoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-dynamoStoreRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
  
  APIloggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-APIloggingRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
  
  iotRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-iotRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-admin"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
        - PolicyName: !Sub "${AWS::StackName}-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "iot:Connect"
                Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
              - Effect: Allow
                Action:
                  - "iot:Receive"
                  - "iot:Publish"
                  - "iot:Subscribe"
                Resource:
                  - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
                  - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
  
  outgoingDataRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-outgoingDataRuleRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: iotTimestreamRole-logging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource:
                  - !GetAtt outgoingDataRuleActionLogs.Arn
                  - !GetAtt outgoingDataRuleErrorLogs.Arn
  
###########################
#### AMPLIFY RESOURCES ####
###########################
  
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${AWS::StackName}-Amplify-app"
      Repository: !Ref AmplifyAppRepoURL
      AccessToken: !Ref AmplifyAppRepoToken
      Platform: WEB_COMPUTE
      EnableBranchAutoDeletion: true
      IAMServiceRole: !Ref AmplifyFunctionRole
      EnvironmentVariables: #These are injected into the BuildSepc environment
        - Name: env1
          Value: env1value
      #BuildSpec can optionally be amplify.yml at the root of project
      BuildSpec: !Sub |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - npm ci
            build:
              commands:
                - echo "AWS_REGION=${AWS::Region}" >> .env
                - cat .env
                - |
                  cat << EOF > aws-exports.js
                  /* eslint-disable spaced-comment */
                  /* eslint-disable quotes */
                  /* eslint-disable quote-props */
                  const awsExports = {
                    "aws_project_region": "${AWS::Region}",
                    "aws_cognito_region": "${AWS::Region}",
                    "aws_appsync_region": "${AWS::Region}",
                    "aws_user_files_s3_bucket_region": "${AWS::Region}",
                    "aws_mobile_analytics_app_region": "${AWS::Region}",
                    "aws_user_pools_id": "${CognitoUserPool}",
                    "aws_user_pools_web_client_id": "${CognitoUserPoolClient}",
                    "aws_cognito_identity_pool_id": "${CognitoIdentityPool}",
                    "aws_appsync_graphqlEndpoint": "${GraphQLApi.GraphQLUrl}",
                    "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS",
                    "aws_mobile_analytics_app_id": "${PinpointApp}",
                    "Analytics": {
                      "AWSPinpoint": {
                        "appId": "${PinpointApp}",
                        "region": "${AWS::Region}",
                      },
                    },
                  };
                  export default awsExports;
                  EOF
                - cat aws-exports.js
                - rm -f .eslintrc.json
                - npm run build
          artifacts:
            baseDirectory: .next
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
  
  AmplifyAppDomain:
    Type: AWS::Amplify::Domain
    Condition: IsDomainConfigured
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: !Ref Domain
      EnableAutoSubDomain: false
      SubDomainSettings:
        - BranchName: !Ref AmplifyAppRepoBranch
          Prefix: !If [IsSubDomainConfigured, !Ref DomainPrefix, '']
    DependsOn:
      - AmplifyBranch
  
  AmplifyAppLogGroup: #amplify would auto create this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/amplify/', !GetAtt AmplifyApp.AppId]]
  
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !Ref AmplifyAppRepoBranch
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true
      Stage: PRODUCTION
  
###########################
#### COGNITO RESOURCES ####
###########################
  
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-UserPool"
      UsernameAttributes: # only UsernameAttributes or AliasAttributes can be set
        - email
      AutoVerifiedAttributes: 
        - email
      #AliasAttributes: # only UsernameAttributes or AliasAttributes can be set
      #  - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        #DefaultEmailOption: CONFIRM_WITH_CODE
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-UserPoolClient"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 2
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - address
        - birthdate
        - email
        - email_verified
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - phone_number_verified
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo
      WriteAttributes:
        - address
        - birthdate
        - email
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo
      ## OAuth support - hosted UI
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:8080/api/auth/callback/cognito
      LogoutURLs:
        - http://localhost:8080/api/auth/callback/cognito
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - email
        - openid
        - phone
        - profile
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: True
  
  CognitoCustomDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub "${AWS::StackName}"
  
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-IdentityPool"
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
          ServerSideTokenCheck: true
  
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt authRole.Arn
        unauthenticated: !GetAtt unauthRole.Arn
  
  authRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-authRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Path: "/"
      Policies:
        - PolicyName: 'analytics'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobiletargeting:PutEvents
                Resource:
                  - !Join ['', [!GetAtt PinpointApp.Arn, /events/*]]
                  - !Join ['', [!GetAtt PinpointApp.Arn, /*]]
              - Effect: Allow
                Action:
                  - mobiletargeting:UpdateEndpoint
                Resource:
                  - !Join ['', [!GetAtt PinpointApp.Arn, /endpoints/*]]
                  - !Join ['', [!GetAtt PinpointApp.Arn, /*]]
  
  unauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-unauthRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Path: "/"
      Policies:
        - PolicyName: 'analytics'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobiletargeting:PutEvents
                Resource:
                  - !Join ['', [!GetAtt PinpointApp.Arn, /events/*]]
                  - !Join ['', [!GetAtt PinpointApp.Arn, /*]]
              - Effect: Allow
                Action:
                  - mobiletargeting:UpdateEndpoint
                Resource:
                  - !Join ['', [!GetAtt PinpointApp.Arn, /endpoints/*]]
                  - !Join ['', [!GetAtt PinpointApp.Arn, /*]]
  
###########################
#### APPSYNC RESOURCES ####
###########################
  
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${AWS::StackName}-GraphQLApi"
      ApiType: GRAPHQL
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            UserPoolId: !Ref CognitoUserPool
            AwsRegion: !Ref AWS::Region
      IntrospectionConfig: ENABLED
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt APIloggingRole.Arn
        ExcludeVerboseContent: false
        FieldLogLevel: ALL #Can be NONE, ERROR or ALL
      Visibility: GLOBAL #Can be GLOBAL or PRIVATE
      QueryDepthLimit: 75 #between 1 and 75
      ResolverCountLimit: 10000 # The maximum number of resolvers that can be invoked in a single request. Between 1 and 10000
      XrayEnabled: true
  
  GraphQLApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/appsync/apis/', !GetAtt GraphQLApi.ApiId]]
  
  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt GraphQLApi.ApiId
  
  GraphQLApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties: 
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition:
        !Sub |
          type Device @aws_cognito_user_pools {
            userId: String!
            deviceId: String!
            type: String!
            name: String

          }
          
          type PublishToAppsync {
            deviceId: String!
            message: String!
          }
          
          input PublishToDeviceInput {
            deviceId: String!
            message: String!
          }
          
          type Response {
            message: String!
            traceId: String!
          }
          
          type Mutation {
            publishToDevice(input: PublishToDeviceInput!): Response
            publishToAppsync(deviceId: String!, message: String!): PublishToAppsync
          }
          
          type Query {
            getChannel: String
            listDevices(userId: ID!): [Device]
              @aws_cognito_user_pools
          }
          
          type Subscription {
            subscribeToAppsync(deviceId: String!): PublishToAppsync
              @aws_subscribe(mutations: ["publishToAppsync"])
          }
          
          schema {
            query: Query
            mutation: Mutation
            subscription: Subscription
          }
  
  customMQTTdataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: customMQTTdataSource # [_A-Za-z][_0-9A-Za-z]*
      ApiId: !GetAtt GraphQLApi.ApiId
      Type: HTTP
      ServiceRoleArn: !GetAtt iotRole.Arn
      HttpConfig:
        Endpoint: !Sub "https://${IoTBrokerEndpoint}"
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningServiceName: iotdevicegateway
            SigningRegion: !Ref AWS::Region
  
  NoneDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: NoneDataSource # [_A-Za-z][_0-9A-Za-z]*
      ApiId: !GetAtt GraphQLApi.ApiId
      Type: NONE
  
  DevicesTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: DevicesTableDataSource # [_A-Za-z][_0-9A-Za-z]*
      ApiId: !GetAtt GraphQLApi.ApiId
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt dynamoStoreRole.Arn
      DynamoDBConfig:
        TableName: !Ref devicesTable
        AwsRegion: !Ref AWS::Region
  
  listDevicesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DevicesTableDataSource.Name
      TypeName: Query
      FieldName: listDevices
      Runtime:
        Name:  APPSYNC_JS
        RuntimeVersion: "1.0.0"
      Code: |
        import { util } from '@aws-appsync/utils';
        
        export function request(ctx) {
          const userId = ctx.arguments.userId;
          const callerId = ctx.identity.sub;
          
          if (userId != callerId) {
            util.error(`Cannot access devices for ${userId}`);
          }
          
          return {
            version: '2018-05-29',
            operation: 'Query',
            query: {
              expression: 'userId = :userId',
              expressionValues: {
                ':userId': {
                  'S': userId
                },
              },
            },
          };
        }
        
        export function response(ctx) {
          if (!ctx.result.items || ctx.result.items.length === 0) {
            return [];
          }
          return ctx.result.items;
        }
    DependsOn:
      - GraphQLApiSchema
  
  publishToAppsyncResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt NoneDataSource.Name
      TypeName: Mutation
      FieldName: publishToAppsync
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "payload": {
            "deviceId": "$context.arguments.deviceId",
            "message": "$context.arguments.message"
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)
    DependsOn:
      - GraphQLApiSchema
  
  publishToDeviceResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt customMQTTdataSource.Name
      TypeName: Mutation
      FieldName: publishToDevice
      Runtime:
        Name:  APPSYNC_JS
        RuntimeVersion: "1.0.0"
      Code: |
        import { util } from '@aws-appsync/utils';
                
        export function request(ctx) {
          const deviceId = ctx.args.input.deviceId;
          const message = ctx.args.input.message;
          
          const endpoint = `/topics/${deviceId}/incoming`;
          
          return fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: message,
          });
        }
                
        export function response(ctx) {
          const { statusCode, body } = ctx.result;
          return JSON.parse(body);
        }
                
        function fetch(resourcePath, options) {
          const { method = 'GET', headers, body: _body, query } = options;
          const body = typeof _body === 'object' ? JSON.stringify(_body) : _body;
          return {
            resourcePath,
            method,
            params: { headers, query, body },
          };
        }
    DependsOn:
      - GraphQLApiSchema
  
#####################
### DEVICES TABLE ###
#####################
  
  devicesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${AWS::StackName}-devicesTable"
      BillingMode: PROVISIONED
      TableClass: STANDARD
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: deviceId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: deviceId
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  
#########################
### IOT TEST RESOURCE ###
#########################
  
  exampleThing:
    Type: AWS::IoT::Thing
    Properties:
      # On the scale of millions of things, probably a uuid that's linked AWS side to a userId etc
      # Something simple for testing
      ThingName: "light-bulb" # This must be the same as the DEVICE_ID in arduino\iot-lightbulb\arduino_secrets.h
  
  # Policy examples: https://docs.aws.amazon.com/iot/latest/developerguide/example-iot-policies.html
  # ${iot:Connection.Thing.ThingName}
  # requires a registered thing's name to be used as the client ID for MQTT connections to the AWS IoT message broker
  exampleThingPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-${exampleThing}-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: "iot:Connect"
            Resource: !Join ['', [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/", "${iot:Connection.Thing.ThingName}"]]
            Condition:
              Bool:
                iot:Connection.Thing.IsAttached: true
          - Effect: Allow
            Action: "iot:Publish"
            Resource: !Join ['', [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/outgoing/", "${iot:Connection.Thing.ThingName}"]]
          - Effect: Allow
            Action: "iot:Receive"
            Resource: !Join ['', [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/", "${iot:Connection.Thing.ThingName}/incoming"]]
          - Effect: Allow
            Action: "iot:Subscribe"
            Resource: !Join ['', [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/", "${iot:Connection.Thing.ThingName}/incoming"]]
  
  exampleThingPolicyAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      PolicyName: !Ref exampleThingPolicy
      Principal: !Ref iotCertificateArn
  
  exampleThingPrincipalAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      ThingName: !Ref exampleThing
      Principal: !Ref iotCertificateArn
  
#####################
### IOT RESOURCES ###
#####################
  
  outgoingDataRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: outgoing_data_rule
      TopicRulePayload:
        Description: This rule captures all data published by devices to AWS
        AwsIotSqlVersion: '2016-03-23'
        RuleDisabled: false
        Sql: !Sub "SELECT *, topic(2) as deviceId FROM 'outgoing/#'" # Substitution tempaltes: https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html
        Actions:
          - CloudwatchLogs:
              BatchMode: false
              LogGroupName: !Ref outgoingDataRuleActionLogs
              RoleArn: !GetAtt outgoingDataRuleRole.Arn
          - Lambda:
              FunctionArn: !GetAtt forwardToAppsyncFunction.Arn
        ErrorAction:
          CloudwatchLogs:
            BatchMode: false
            LogGroupName: !Ref outgoingDataRuleErrorLogs
            RoleArn: !GetAtt outgoingDataRuleRole.Arn
  
  outgoingDataRuleErrorLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/iot/, outgoingDataRuleErrorLogs]]
  
  outgoingDataRuleActionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/iot/, outgoingDataRuleActionLogs]]
  
  forwardToAppsyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-forwardToAppsyncFunction"
      Role: !GetAtt lambdaRole.Arn
      Handler: src/forwardToAppsync.handler
      CodeUri: ./lambda
      Environment:
        Variables:
          X_API_KEY: !GetAtt GraphQLApiKey.ApiKey
          X_API_URL: !GetAtt GraphQLApi.GraphQLUrl
  
  forwardToAppsyncFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref forwardToAppsyncFunction]]
  
  forwardToAppsyncFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: iot.amazonaws.com
      FunctionName: !GetAtt forwardToAppsyncFunction.Arn
      SourceArn: !GetAtt outgoingDataRule.Arn
  
##########################
### PINPOINT ANALYTICS ###
##########################
  
  PinpointApp:
    Type: AWS::Pinpoint::App
    Properties:
      Name: !Sub "${AWS::StackName}-PinpointApp"
  
Outputs:
  AmplifyAppId: # do not change name
    Value: !GetAtt AmplifyApp.AppId
  AmplifyAppBranchName: # do not change name
    Value: !GetAtt AmplifyBranch.BranchName
  AppName:
    Value: !GetAtt AmplifyApp.AppName
  DefaultDomain:
    Value: !GetAtt AmplifyApp.DefaultDomain
